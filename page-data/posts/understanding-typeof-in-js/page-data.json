{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/understanding-typeof-in-js","result":{"data":{"markdownRemark":{"id":"9e4af674-0e7e-575b-8014-cd1dcbea8874","html":"<p>We all know that == and === are comparison operators in JavaScript, But == is the equality operator that converts the operands if they are not of the same type, before making the comparison. While the === is called the Identity/strict equality which return true if the operands are strictly equal. i.e if they are of the same type and their values are the same.</p>\n<p>The equality operator (==) compares only value of the variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">i<span class=\"token punctuation\">.</span>e <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">==</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: true. Because their value are the same</span></code></pre></div>\n<p>N.B: That == achieve the same thing as the === only if in a situation where they are of the same data type.\nFrom the previous example var x and y are of the same data type number that’s why it seem as if we ignore the strictly equality (===).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">e<span class=\"token punctuation\">.</span>g <span class=\"token number\">1.</span> Var x1 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> x2 <span class=\"token operator\">=</span> “chisom”<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">==</span> x2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>//Output: false. Because they have the of different data type, so in this situation == is not the a good operator to use.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">e<span class=\"token punctuation\">.</span>g <span class=\"token number\">2.</span> <span class=\"token operator\">==</span> can never replace <span class=\"token operator\">===</span><span class=\"token punctuation\">,</span> because it will <span class=\"token keyword\">try</span> to <span class=\"token function\">convert</span> <span class=\"token punctuation\">(</span>coerce<span class=\"token punctuation\">)</span> the values before doing the comparison<span class=\"token punctuation\">,</span> and <span class=\"token keyword\">in</span> some cases will become something <span class=\"token keyword\">else</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> “<span class=\"token number\">5</span>”<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>//Output: true : because our variable c was coerce to a number 5, before checking if their values are the same which is now true.</p>\n<h2 id=\"reasons-why-you-might-want-to-used--other-than-\" style=\"position:relative;\"><a href=\"#reasons-why-you-might-want-to-used--other-than-\" aria-label=\"reasons why you might want to used  other than  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reasons why you might want to used === other than ==</h2>\n<ol>\n<li>it’s safer to use === in many circumstances, and that if you’re going to use it in some circumstances it’s better to be consistent and use it for everything.</li>\n<li>The thinking is that you can either think about whether to use == or === every time you check for equality, or you can just get into the habit of always writing ===.</li>\n<li>Thirdly there’s hardly ever a reason for using == over === if you’re comparing to true or false and you want coercion (e.g you want 0 or ” to evaluate to false) then just use if(! empty<em>str) rather than if(empty</em>str == false).</li>\n</ol>\n<h2 id=\"typeof-operator\" style=\"position:relative;\"><a href=\"#typeof-operator\" aria-label=\"typeof operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typeof operator</h2>\n<p>From MDN: “The typeof operator returns a string indicating the type of the unevaluated operand”.</p>\n<h3 id=\"how-is-it-used\" style=\"position:relative;\"><a href=\"#how-is-it-used\" aria-label=\"how is it used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How is it used?</h3>\n<p>Since typeof is a unary operator, the operand follows the operator. No additional punctuation is required.\ntypeof 5 // “number”.\ntypeof “chisom” // “string”</p>\n<p>The typeof operator is not a function. You can surround the operand with parentheses so that the expression looks like a function call, but the parentheses will simply act as a grouping operator. In fact you can decorate the operand with all manner of punctuation without derailing the operator.\ne.g </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// “number”</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//”number”</span></code></pre></div>\n<p>typeof is just not very discriminating. When typeof is applied to any object type other than Function, it returns “object”. It does not distinguish between generic objects and the other built-in types. you can check that from MDN\nBut this is where it failed us:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//First type Checking works fine</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token function-variable function\">getFirstName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>‘chisom’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> person <span class=\"token operator\">===</span> ‘object’<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n person<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this works fine just like our expectation</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Second type Checking throw an Exception..</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> person <span class=\"token operator\">===</span> ‘object’<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//person.getFirstName is not a function</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>from the second part of the example you can see that the typeof has failed because we are trying to check if the person is a plain object which it isn’t.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>conclusion</h2>\n<p>Typeof operator is a bit strange. Unless you know how to really use it, simply avoid it to avoid headaches. and a simple way of looking at, it is by using Object.prototype.toString.call();</p>","fields":{"slug":"/posts/understanding-typeof-in-js","tagSlugs":["/tag/java-script/"]},"frontmatter":{"date":"2018-10-08","description":"We all know that == and === are comparison operators in JavaScript, But == is the equality operator that converts the operands if they are not of the same type, before making the comparison. \nWhile the === is called the Identity/strict equality which return true if the operands are strictly equal.","tags":["JavaScript"],"title":"Understanding ==, === and typeof in JavaScript","socialImage":null}}},"pageContext":{"slug":"/posts/understanding-typeof-in-js"}},"staticQueryHashes":["251939775","401334301","575202503"]}